namespace AttentionFunctions

open System
open Microsoft.VisualStudio.TestTools.UnitTesting
open Attention

[<TestClass>]
type AttentionTests() =

    let tolerance = 0.0

    let lookup1 i j k = 
        let result = Random(i*9997 + j*97 + k).NextDouble()
        result

    let lookup2 i j k = 
        let result = Random(1000003 + i*9997 + j*97 + k).NextDouble()
        result

    let randomMultiHead _ =
        let dim1 = Random().Next(1,10)
        let dim2 = Random().Next(1,10)
        Array.init dim1 (fun _ -> Array.init dim2 (fun _ -> Random().NextDouble()))
        
    [<TestMethod>]
    member this.Test1 () =          
        let tokenPosition = 1
        let query = [|[|0.8516213107; 0.8497759217; 0.3680692184; 0.9027738878|];
              [|0.158325556; 0.5433958807; 0.3553144444; 0.7854563832|];
              [|0.7458529399; 0.7639840815; 0.2940329919; 0.560524294|];
              [|0.07992570969; 0.5628544472; 0.7966964846; 0.3990452654|];
              [|0.3759786894; 0.5317173336; 0.2292599697; 0.9131793383|];
              [|0.03288412154; 0.04326309353; 0.3110813904; 0.4396227655|]|]
        let actual = attention lookup1 lookup2 tokenPosition query
        actual |> Array.iter (fun f -> printf "%s; " (f.ToString("R")))
        let expected = [| 0.41378235151023446; 0.5333724515993312; 0.45863297988850027; 0.5782230799775969; 0.5810713933337044; 0.6777362225025559; 0.20016153669168893; 0.7225868508808219; 0.8060411560232474; 0.3284664702123805; 0.38484716877397057; 0.3733170985906463; 0.5043219951954035; 0.5224729793011206; 0.5491726235736695; 0.5673236076793864; 0.17876957193232237; 0.7011948861214552; 0.2236202003105882; 0.746045514499721; 0.3810335802975514; 0.3940287556894634; 0.4258842086758172; 0.4388793840677292 |]
        Assert.AreEqual<int>(expected.Length, actual.Length)
        for i in 0 .. expected.Length - 1 do
            Assert.AreEqual(expected.[i], actual.[i], tolerance)

    [<TestMethod>]
    member this.Test2 () =
        let tokenPosition = 9
        let query = [|[|0.5412692309; 0.4554655588|]; [|0.5334360718; 0.5309731571|];
            [|0.8117205568; 0.5501999534|]; [|0.1004683488; 0.05756168561|]|]
        let actual = attention lookup1 lookup2 tokenPosition query
        actual |> Array.iter (fun f -> printf "%s; " (f.ToString("R")))
        let expected = [| 0.5345645621206642; 0.47732574123789223; 0.5214790885055341; 0.5598120569167295; 0.4299410535132177; 0.5356172704667403; 0.40781428225884453; 0.5233428581647472 |]
        Assert.AreEqual<int>(expected.Length, actual.Length)
        for i in 0 .. expected.Length - 1 do
            Assert.AreEqual(expected.[i], actual.[i], tolerance)

    [<TestMethod>]
    member this.Test3 () =
        let tokenPosition = 5
        let query = [|[|0.1751692693; 0.9392337278; 0.7044380347; 0.9301890515; 0.721364695; 0.6995499369|];
              [|0.3275586014; 0.08611567537; 0.340234523; 0.6137633312; 0.7277324202; 0.5822485043|];
              [|0.1436010811; 0.5198038122; 0.1453897966; 0.08671467567; 0.6105642577; 0.6251638446|];
              [|0.1820638612; 0.6033739519; 0.3530952564; 0.2659427005; 0.1951707119; 0.5348789919|]|]
        let actual = attention lookup1 lookup2 tokenPosition query
        actual |> Array.iter (fun f -> printf "%s; " (f.ToString("R")))
        let expected = [| 0.5989647004131624; 0.5096214402991912; 0.346630150278699; 0.554472068677457; 0.39148077865696473; 0.5993226970557228; 0.6489034482879685; 0.4796062367879814; 0.38488372385122077; 0.5244568651662472; 0.4297343522294865; 0.569307493544513; 0.5032614892798859; 0.5155798877397428; 0.3887751587882234; 0.5604305161180086; 0.4336257871664892; 0.6052811444962745; 0.3522875291272416; 0.5256600442843194; 0.3971381575055074; 0.5705106726625853; 0.44198878588377327; 0.6153613010408511 |]
        Assert.AreEqual<int>(expected.Length, actual.Length)
        for i in 0 .. expected.Length - 1 do
            Assert.AreEqual(expected.[i], actual.[i], tolerance)

    [<TestMethod>]
    member this.Test4 () =
        let tokenPosition = 7
        let query = [|[|0.6109373872; 0.3970619771; 0.6052629191|];
              [|0.8573555854; 0.721353838; 0.7161846016|];
              [|0.09935960947; 0.2329415936; 0.4292989707|];
              [|0.7046323517; 0.07659917475; 0.5924169045|]|]
        let actual = attention lookup1 lookup2 tokenPosition query
        actual |> Array.iter (fun f -> printf "%s; " (f.ToString("R")))
        let expected = [| 0.5712428107634298; 0.4838814109484949; 0.4261671531286484; 0.5110331856857138; 0.5571365029504014; 0.37360746676549295; 0.47491169143916356; 0.4868022342427084; 0.40803457299231977; 0.45101749526182033; 0.5181515433874517; 0.49586812364008626 |]
        Assert.AreEqual<int>(expected.Length, actual.Length)
        for i in 0 .. expected.Length - 1 do
            Assert.AreEqual(expected.[i], actual.[i], tolerance)

    [<TestMethod>]
    member this.Test5 () =
        let tokenPosition = 3
        let query = [|[|0.9528317877|]; [|0.1191888796|]; [|0.538782558|]|]
        let actual = attention lookup1 lookup2 tokenPosition query
        actual |> Array.iter (fun f -> printf "%s; " (f.ToString("R")))
        let expected = [| 0.6006901718574746; 0.5533018257059672; 0.49890846449179854 |]
        Assert.AreEqual<int>(expected.Length, actual.Length)
        for i in 0 .. expected.Length - 1 do
            Assert.AreEqual(expected.[i], actual.[i], tolerance)

    [<TestMethod>]
    member this.Test6 () =
        let tokenPosition = 4
        let query = [|[|0.162925355; 0.08971301947; 0.8849992405; 0.9168833068; 0.8271093021; 0.07904591027; 0.7223934429; 0.5010885019; 0.7362528827|];
              [|0.8938964839; 0.4577848153; 0.9946770221; 0.6023527343; 0.3132757761; 0.3124576609; 0.7043434119; 0.7388810857; 0.8248016569|];
              [|0.3420886422; 0.2683556378; 0.5478500388; 0.3316157719; 0.5581382865; 0.09071434816; 0.00294661679; 0.05894805079; 0.3454874285|];
              [|0.8780139894; 0.7704088009; 0.7450280316; 0.3589596155; 0.648640513; 0.6073403575; 0.07717252128; 0.1746904557; 0.7290892642|];
              [|0.5683713551; 0.120494712; 0.8337441142; 0.9369954332; 0.09993629818; 0.8185851521; 0.02904085696; 0.8873016946; 0.9923876976|];
              [|0.8460956663; 0.209256939; 0.0306956639; 0.8934654998; 0.4168765069; 0.1553912899; 0.4032846086; 0.4526975086; 0.8979110795|];
              [|0.9514212132; 0.2463571881; 0.5487139642; 0.242614081; 0.7757346325; 0.6170199402; 0.07433742015; 0.1019170488; 0.2232865033|];
              [|0.3270900203; 0.4546358511; 0.5574029879; 0.8644752073; 0.4925594258; 0.3263325223; 0.4174187359; 0.6356746947; 0.3198379967|]|]
        let actual = attention lookup1 lookup2 tokenPosition query
        actual |> Array.iter (fun f -> printf "%s; " (f.ToString("R")))
        let expected = [| 0.5401570178333808; 0.45222008559960775; 0.4491687687010027; 0.49707071397787356; 0.4940193970792685; 0.5419213423561393; 0.5388700254575344; 0.5867719707344051; 0.5837206538358002; 0.6217996015525258; 0.5319682081842763; 0.34411019201328985; 0.5768188365625422; 0.38896082039155566; 0.6216694649408079; 0.43381144876982153; 0.6665200933190737; 0.4786620771480874; 0.5414638538921815; 0.42765167272491905; 0.4186049909320678; 0.47250230110318486; 0.46345561931033363; 0.5173529294814507; 0.5083062476885994; 0.5622035578597165; 0.5531568760668654; 0.46354529957635754; 0.4810059489975261; 0.5083959279546233; 0.525856577375792; 0.5532465563328892; 0.5707072057540576; 0.598097184711155; 0.4652852788611574; 0.6429478130894207; 0.3180397661925545; 0.5694257901265831; 0.3628903945708203; 0.6142764185048488; 0.4077410229490862; 0.6591270468831147; 0.45259165132735196; 0.39892016946053804; 0.49744227970561783; 0.40153326609672607; 0.49303496773577427; 0.4463838944749918; 0.5378855961140401; 0.4912345228532577; 0.5827362244923059; 0.5360851512315236; 0.4485942153011052; 0.5809357796097894; 0.5098905740131785; 0.5511691647870527; 0.5547412023914443; 0.5960197931653185; 0.5995918307697102; 0.29231918498580006; 0.644442459147976; 0.3371698133640659; 0.6892930875262419; 0.34940896155938816; 0.6559694178235024; 0.394259589937654; 0.5293158384407575; 0.4391102183159198; 0.409016110134331; 0.48396084669418565; 0.45386673851259685; 0.5288114750724515 |]
        Assert.AreEqual<int>(expected.Length, actual.Length)
        for i in 0 .. expected.Length - 1 do
            Assert.AreEqual(expected.[i], actual.[i], tolerance)

    [<TestMethod>]
    member this.Test7 () =
        let tokenPosition = 8
        let query = [|[|0.9761846183; 0.1638142599; 0.4517354577; 0.9125525988; 0.6309614103; 0.009772513618|];
              [|0.2610114822; 0.3017523916; 0.0630214359; 0.3307089448; 0.463173404; 0.5254115652|];
              [|0.06799175815; 0.1129505194; 0.3542551692; 0.9884424354; 0.2149664201; 0.4300814623|];
              [|0.1470449969; 0.8058410872; 0.4717654804; 0.8852281226; 0.4104911728; 0.0415969397|];
              [|0.08747547889; 0.3617236969; 0.6639878507; 0.4741481599; 0.6900294938; 0.9078664069|];
              [|0.2379238556; 0.8373306473; 0.6056780651; 0.9373507597; 0.02258346735; 0.01324414097|]|]
        let actual = attention lookup1 lookup2 tokenPosition query
        actual |> Array.iter (fun f -> printf "%s; " (f.ToString("R")))
        let expected = [| 0.5200671552413249; 0.48507647957385297; 0.3936189231982312; 0.5299271079521188; 0.4384695515764969; 0.5747777363303846; 0.553863134620711; 0.5051698171085209; 0.3803062343336429; 0.5500204454867869; 0.4251568627119088; 0.5948710738650527; 0.4628488035006039; 0.5087653744814208; 0.38817963965525354; 0.5536160028596866; 0.4330302680335194; 0.5984666312379524; 0.3689013281194991; 0.5285006162047015; 0.41375195649776497; 0.5733512445829673; 0.4586025848760307; 0.5318948049461037; 0.40721015319150355; 0.5317568190182427; 0.45206078156976937; 0.5766074473965085; 0.4969114099480352; 0.5345479863430345; 0.40448396765726763; 0.5567616999002969; 0.4493345960355334; 0.5123949272497977; 0.49418522441379925; 0.4704845532454495 |]
        Assert.AreEqual<int>(expected.Length, actual.Length)
        for i in 0 .. expected.Length - 1 do
            Assert.AreEqual(expected.[i], actual.[i], tolerance)

    [<TestMethod>]
    member this.Test8 () =
        let tokenPosition = 6
        let query = [|[|0.2917502885; 0.06569602103; 0.6473157163|];
              [|0.2569158392; 0.07787034536; 0.9828603177|];
              [|0.4443831625; 0.6806279303; 0.6193392575|];
              [|0.474066941; 0.6995799681; 0.3554117321|];
              [|0.178475957; 0.8034900893; 0.4694650698|];
              [|0.1340710104; 0.853773923; 0.3429655811|];
              [|0.5416214853; 0.5928584673; 0.07249667496|]|]
        let actual = attention lookup1 lookup2 tokenPosition query
        actual |> Array.iter (fun f -> printf "%s; " (f.ToString("R")))
        let expected = [| 0.6174790117351135; 0.41884426058459945; 0.43128468696962247; 0.5844425717116171; 0.5342991312239622; 0.408902877964143; 0.4397219993740257; 0.5350671318301659; 0.3691492678943875; 0.4252146846267781; 0.4874087325778215; 0.47006531300504395; 0.3854903450193708; 0.6003348011211771; 0.43034097339763666; 0.34730076754231215; 0.5625522175774335; 0.3921513959205779; 0.47992363094662904; 0.5303234547054255; 0.5247742593248949 |]
        Assert.AreEqual<int>(expected.Length, actual.Length)
        for i in 0 .. expected.Length - 1 do
            Assert.AreEqual(expected.[i], actual.[i], tolerance)

    [<TestMethod>]
    member this.Test9 () =    
        let tokenPosition = 7
        let query = [|[|0.6821979427; 0.2859531685; 0.362616435; 0.7715036799; 0.9934292621; 0.2260945821; 0.6901064019; 0.9288072476|];
          [|0.1853142486; 0.5752065898; 0.7716352183; 0.5153756228; 0.1391680506; 0.02016103125; 0.5150106521; 0.1950722134|];
          [|0.6554947408; 0.3850200407; 0.9680191385; 0.7145449437; 0.8342636735; 0.2479249602; 0.7749056734; 0.0760513899|];
          [|0.8214138998; 0.5420679151; 0.139013802; 0.9416865471; 0.1306441644;  0.949585179; 0.9481172271; 0.951339688|];
          [|0.6145128034; 0.3452227621; 0.1364659898; 0.1171221086; 0.2949791876; 0.9624647344; 0.1277227653; 0.8310183626|]|]
        let actual = attention lookup1 lookup2 tokenPosition query
        actual |> Array.iter (fun f -> printf "%s; " (f.ToString("R")))
        let expected = [| 0.5923922111663715; 0.4561505532149176; 0.4303150187804531; 0.5010011815931835; 0.47516564715871895; 0.5458518099714493; 0.5200162755369847; 0.590702438349715; 0.5249968319857713; 0.5478095390697938; 0.3492236170592828; 0.5926601674480595; 0.39407424543754865; 0.6375107958263255; 0.4389248738158145; 0.5584358471296398; 0.5087536659940252; 0.4390377343738451; 0.4659359428182185; 0.4838883627521109; 0.5107865711964843; 0.5287389911303768; 0.5556371995747501; 0.46076607026308225; 0.4193944613863744; 0.48551061793425626; 0.46424508976464024; 0.5303612463125221; 0.509095718142906; 0.48954928960892846; 0.5539463465211718; 0.45286708904155276; 0.33546101626403535; 0.5746022199907947; 0.3803116446423012; 0.6194528483690604; 0.425162273020567; 0.5672710911867243; 0.47001290139883284; 0.41508569586635025 |]
        Assert.AreEqual<int>(expected.Length, actual.Length)
        for i in 0 .. expected.Length - 1 do
            Assert.AreEqual(expected.[i], actual.[i], tolerance)